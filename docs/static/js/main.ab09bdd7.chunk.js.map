{"version":3,"sources":["theme.ts","components/AppPanel.tsx","utils/formatting.ts","utils/group-by-field.ts","utils/vcf.ts","store/selectors.ts","components/DownloadVcfFile.tsx","utils/browser.ts","store/raw-data.ts","components/DragDropFile.tsx","store/output-options.ts","utils/select-field.ts","components/StyledSelect.tsx","components/OutputOptions.tsx","components/DataTable/DataTableErrors.tsx","components/DataTable/DataTableHeaders.tsx","components/DataTable/DataTableRow.tsx","components/DataTable/DataTable.tsx","components/RawDataView.tsx","components/VcfContactsView.tsx","store/vcf-field-mapping.ts","components/VcfFieldMapper/AddOptionalVcfField.tsx","components/VcfFieldMapper/FieldPicker.tsx","components/VcfFieldMapper/VcfFieldMapper.tsx","App.tsx","reportWebVitals.ts","utils/parsing.ts","store/sagas.ts","store/index.ts","index.tsx"],"names":["theme","colors","main","tableContent","title2","highlight","background","background2","backgroundButton","error","scroll","scrollBg","fontSizes","desktop","mobile","dimensions","thresholdMobile","fonts","titles","default","AppPanel","title","children","className","Container","styled","div","React","memo","FormatError","Error","NO_GROUPING_KEY","GUESS_PHONE_FIELD_NAME","GUESS_NAME_FIELD_NAME","VCF_FIELD_NAMES","VCF_FIELD_NAMES_REQUIRED","VCF_FIELD_NAMES_DISPLAY","workPhone","firstName","guessFieldName","headers","guessList","defaultFieldName","headersNormalized","map","possibleName","toLowerCase","guessedFieldName","headerIndex","indexOf","getDefaultVcfFieldMapping","email","note","selectRawData","state","rawData","data","selectRawDataSafe","selectRawDataErrors","errors","selectRawDataHeaders","length","Object","keys","selectVcfFieldMapping","vcfFieldMapping","selectVcfContactsAndErrors","fieldMapping","prefix","selectOutputOptionsPrefix","groupByField","selectOutputOptionsGroupByField","groupNames","Set","forEach","add","groupedResults","groupName","vcfContacts","filter","vcfContact","contactError","vcfFieldName","rawDataFieldName","value","phoneString","isString","phoneNumber","parsePhoneNumberFromString","isValid","number","formatPhoneNumber","err","push","outputOptions","DownloadVcfFile","vcfContactsAndErrors","useSelector","downloadButtons","entries","group","filename","onClick","vCardStr","contacts","vCardStrings","contact","vCard","vCardsJS","name","getFormattedString","join","contactsToVcard","contents","type","blob","Blob","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","forceDownload","RAW_DATA_LOAD_LOCAL","RAW_DATA_LOAD_COMPLETE","rawDataLoadComplete","result","payload","initialState","DragDropFile","dispatch","useDispatch","onDrop","useCallback","file","rawDataLoadLocal","useDropzone","getRootProps","getInputProps","isDragActive","multiple","OUTPUT_OPTIONS_SET_PREFIX","OUTPUT_OPTIONS_SET_GROUP_BY_FIELD","rawDataFieldNameToOption","label","Select","GROUP_BY_FIELD_DEFAULT_OPTION","OutputOptions","rawDataHeaders","groupByFieldOptions","htmlFor","id","onChange","event","setOutputOptionsPrefix","currentTarget","StyledSelect","classNamePrefix","options","option","fieldName","DataTableErrors","errorsTitle","i","message","DataTableHeaders","DataTableRow","datum","header","DataTable","headersDisplayMapping","headersDisplay","DataTableContainer","RawDataView","Component","GroupContainer","VCF_FIELD_MAPPING_SET","setVcfFieldMapping","vcfFieldNameToOption","AddOptionalVcfField","useState","isAddingVcfField","setIsAddingVcfField","selectedVcfFieldName","setSelectedVcfFieldName","vcfFieldOptions","includes","disabled","FieldPicker","choices","selected","isRequiredVcfField","displayVcfFieldName","VcfFieldNameContainer","ArrowContainer","span","VcfFieldMapper","App","VcfContactsView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ParseError","normalizePapaParseError","row","values","parseCsv","a","Promise","resolve","Papa","parse","skipEmptyLines","complete","results","erroredRows","d","rawDataLoadLocalSaga","rawDataLoadSaga","rootSaga","action","call","put","select","takeLatest","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","enhancers","applyMiddleware","store","createStore","compose","run","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ab09bdd7.chunk.js","sourcesContent":["const theme = {\n    colors: {\n        main: 'white',\n        tableContent: 'black',\n        title2: '#222',\n        highlight: 'green',\n        background: '#222',\n        background2: '#555',\n        backgroundButton: '#777',\n        error: '#ffa0a0',\n        scroll: 'green',\n        scrollBg: 'black',\n    },\n    fontSizes: {\n        desktop: 16,\n        mobile: 12,\n    },\n    dimensions: {\n        thresholdMobile: 720,\n    },\n    fonts: {\n        titles: 'fucxed',\n        default: 'Crimson',\n    },\n}\n\nexport default theme\n","import React, { PropsWithChildren } from 'react'\nimport styled from 'styled-components/macro'\nimport theme from '../theme'\n\nexport type Props = PropsWithChildren<{\n    title: string\n    className?: string\n}>\n\nconst AppPanel: React.FunctionComponent<Props> = ({\n    title,\n    children,\n    className = '',\n}) => {\n    return (\n        <div className={className}>\n            <h2>{title}</h2>\n            <Container>{children}</Container>\n        </div>\n    )\n}\n\nconst Container = styled.div``\nexport default styled(React.memo(AppPanel))`\n    padding: 0.5em;\n    margin: 0.5em;\n    background-color: ${theme.colors.background2};\n    h2 {\n        margin-bottom: 0.5em;\n    }\n`\n","import { parsePhoneNumberFromString } from 'libphonenumber-js'\nimport { PhoneNumber } from '../types'\nimport isString from 'lodash.isstring'\n\nexport class FormatError extends Error {}\n\nexport const formatPhoneNumber = (phoneString: string): PhoneNumber => {\n    if (!isString(phoneString)) {\n        throw new FormatError(\n            `Phone number should be a string \"${phoneString}\"`\n        )\n    }\n    // TODO : configutable country code\n    const phoneNumber = parsePhoneNumberFromString(phoneString, 'FR')\n    if (phoneNumber && phoneNumber.isValid()) {\n        return phoneNumber.number as PhoneNumber\n    }\n    // TODO : i18n\n    throw new FormatError(`Invalid phone number \"${phoneString}\"`)\n}\n","export const NO_GROUPING_KEY = 'NO_GROUPING'\n","import { DataHeaders, FieldName, PhoneNumber } from '../types'\nimport vCardsJS from 'vcards-js'\n\nconst GUESS_PHONE_FIELD_NAME = [\n    'téléphone',\n    'telephone',\n    'phone',\n    'phone number',\n    'numéro de téléphone',\n]\nconst GUESS_NAME_FIELD_NAME = ['pseudo']\n\nexport const VCF_FIELD_NAMES: Array<VcfFieldName> = [\n    'firstName',\n    'workPhone',\n    'email',\n    'note',\n]\nexport const VCF_FIELD_NAMES_REQUIRED: Array<VcfFieldName> = [\n    'firstName',\n    'workPhone',\n]\n\n// TODO : i18n\nexport const VCF_FIELD_NAMES_DISPLAY = {\n    workPhone: 'téléphone',\n    firstName: 'nom',\n}\n\nexport interface VcfContact {\n    firstName: string\n    workPhone: PhoneNumber\n    email: string\n    note: string\n}\n\nexport type VcfFieldName = keyof VcfContact\n\nexport interface VcfFieldMapping {\n    firstName: FieldName | null\n    workPhone: FieldName | null\n    email: FieldName | null\n    note: FieldName | null\n}\n\n// Helper function, guesses the right field name from `headers` by picking from options in `guessList`.\nconst guessFieldName = (\n    headers: DataHeaders,\n    guessList: Array<string>,\n    defaultFieldName: string | null\n) => {\n    const headersNormalized = headers.map((possibleName) =>\n        possibleName.toLowerCase()\n    )\n    let guessedFieldName: string | null = null\n    for (let possibleName of guessList) {\n        const headerIndex = headersNormalized.indexOf(possibleName)\n        if (headerIndex !== -1) {\n            guessedFieldName = headers[headerIndex]\n            break\n        }\n    }\n    return guessedFieldName || defaultFieldName\n}\n\nexport const getEmptyVcfFieldMapping = () => ({\n    firstName: null,\n    workPhone: null,\n    email: null,\n    note: null,\n})\n\nexport const getDefaultVcfFieldMapping = (\n    headers: DataHeaders\n): VcfFieldMapping => {\n    return {\n        firstName: guessFieldName(\n            headers,\n            GUESS_NAME_FIELD_NAME,\n            headers[0] || null\n        ),\n        workPhone: guessFieldName(\n            headers,\n            GUESS_PHONE_FIELD_NAME,\n            headers[1] || null\n        ),\n        email: null,\n        note: null,\n    }\n}\n\nexport const contactsToVcard = (contacts: Array<VcfContact>) => {\n    const vCardStrings = []\n    for (const contact of contacts) {\n        const vCard = vCardsJS()\n        Object.entries(contact).forEach(\n            ([name, value]) => (vCard[name as VcfFieldName] = value)\n        )\n        vCardStrings.push(vCard.getFormattedString())\n    }\n    return vCardStrings.join('\\n')\n}\n","import { RootState } from '.'\nimport { ContactsAndErrors } from '../types'\nimport { FormatError, formatPhoneNumber } from '../utils/formatting'\nimport { NO_GROUPING_KEY } from '../utils/group-by-field'\nimport { VcfContact, VCF_FIELD_NAMES } from '../utils/vcf'\n\nexport const selectRawData = (state: RootState) => state.rawData.data\n\nexport const selectRawDataSafe = (state: RootState) => {\n    if (!state.rawData.data) {\n        throw new Error(`expected data not null`)\n    }\n    return state.rawData.data\n}\n\nexport const selectRawDataErrors = (state: RootState) => state.rawData.errors\n\nexport const selectRawDataHeaders = (state: RootState) => {\n    const rawData = selectRawDataSafe(state)\n    if (!rawData.length) {\n        return []\n    }\n    return Object.keys(rawData[0])\n}\n\nexport const selectVcfFieldMapping = (state: RootState) => state.vcfFieldMapping\n\nexport const selectVcfContactsAndErrors = (state: RootState) => {\n    const rawData = selectRawDataSafe(state)\n    const fieldMapping = selectVcfFieldMapping(state)\n    const prefix = selectOutputOptionsPrefix(state)\n    const groupByField = selectOutputOptionsGroupByField(state)\n\n    let groupNames: Set<string> = new Set()\n    if (groupByField !== null) {\n        rawData.forEach((rawData) => {\n            groupNames.add(rawData[groupByField])\n        })\n    } else {\n        groupNames.add(NO_GROUPING_KEY)\n    }\n\n    const groupedResults: { [group: string]: ContactsAndErrors } = {}\n\n    groupNames.forEach((groupName) => {\n        const vcfContacts: Array<VcfContact> = []\n        const errors: Array<Error> = []\n        const filteredRawData = groupByField\n            ? rawData.filter((rawData) => rawData[groupByField] === groupName)\n            : rawData\n\n        filteredRawData.forEach((rawData) => {\n            const vcfContact: Partial<VcfContact> = {}\n            let contactError: Error | null = null\n            VCF_FIELD_NAMES.forEach((vcfFieldName) => {\n                const rawDataFieldName = fieldMapping[vcfFieldName]\n                if (rawDataFieldName) {\n                    let value = rawData[rawDataFieldName]\n                    if (vcfFieldName === 'firstName') {\n                        value = `${prefix}${value}`\n                    }\n                    if (vcfFieldName === 'workPhone') {\n                        try {\n                            value = formatPhoneNumber(value)\n                        } catch (err) {\n                            if (err instanceof FormatError) {\n                                contactError = err\n                            } else {\n                                throw err\n                            }\n                        }\n                    }\n                    vcfContact[vcfFieldName] = value\n                }\n            })\n            if (!contactError) {\n                vcfContacts.push(vcfContact as VcfContact)\n            } else {\n                errors.push(contactError)\n            }\n        })\n\n        groupedResults[groupName] = { vcfContacts, errors }\n    })\n\n    return groupedResults\n}\n\nexport const selectOutputOptionsPrefix = (state: RootState) =>\n    state.outputOptions.prefix\n\nexport const selectOutputOptionsGroupByField = (state: RootState) =>\n    state.outputOptions.groupByField\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport { selectVcfContactsAndErrors } from '../store/selectors'\nimport { forceDownload } from '../utils/browser'\nimport { NO_GROUPING_KEY } from '../utils/group-by-field'\nimport { contactsToVcard } from '../utils/vcf'\n\n// TODO : i18n\nconst NO_GROUPING_FILENAME = 'contacts.vcf'\nconst NO_GROUP_NAME_BASENAME = 'GROUPE-SANS-NOM'\n\nexport interface Props {\n    className?: string\n}\n\nconst DownloadVcfFile: React.FunctionComponent<Props> = ({\n    className = '',\n}) => {\n    const vcfContactsAndErrors = useSelector(selectVcfContactsAndErrors)\n\n    const downloadButtons = Object.entries(vcfContactsAndErrors).map(\n        ([group, { vcfContacts, errors }]) => {\n            const filename =\n                group === NO_GROUPING_KEY\n                    ? NO_GROUPING_FILENAME\n                    : `${group.length ? group : NO_GROUP_NAME_BASENAME}.vcf`\n            const onDownloadClicked = () => {\n                const vCardStr = contactsToVcard(vcfContacts)\n                forceDownload(filename, vCardStr, 'text/vcard')\n            }\n            return (\n                <div className={className}>\n                    {/* TODO : i18n */}\n                    <button onClick={onDownloadClicked}>\n                        Télécharger \"{filename}\"\n                    </button>\n                </div>\n            )\n        }\n    )\n\n    return <Container>{downloadButtons}</Container>\n}\n\nconst Container = styled.div``\n\nexport default styled(React.memo(DownloadVcfFile))``\n","export const forceDownload = (\n    filename: string,\n    contents: string,\n    type: string\n) => {\n    const blob = new Blob([contents], { type })\n    if ((window.navigator as any).msSaveOrOpenBlob) {\n        window.navigator.msSaveBlob(blob, filename)\n    } else {\n        const elem = window.document.createElement('a')\n        elem.href = window.URL.createObjectURL(blob)\n        elem.download = filename\n        document.body.appendChild(elem)\n        elem.click()\n        document.body.removeChild(elem)\n    }\n}\n","import { RawData } from '../types'\nimport { ParseError, ParseResult } from '../utils/parsing'\n\n// ------------- Action Types ------------ //\nexport const RAW_DATA_LOAD_LOCAL = 'RAW_DATA_LOAD_LOCAL'\nexport const RAW_DATA_LOAD_COMPLETE = 'RAW_DATA_LOAD_COMPLETE'\nexport const RAW_DATA_LOAD_ERROR = 'RAW_DATA_LOAD_ERROR'\n\nexport interface RawDataLoadLocal {\n    type: typeof RAW_DATA_LOAD_LOCAL\n    payload: File\n}\n\nexport interface RawDataLoadComplete {\n    type: typeof RAW_DATA_LOAD_COMPLETE\n    payload: ParseResult\n}\n\nexport type RawDataTypes = RawDataLoadLocal | RawDataLoadComplete\n\n// ------------ Action Creators ---------- //\nexport const rawDataLoadLocal = (file: File): RawDataTypes => {\n    return {\n        type: RAW_DATA_LOAD_LOCAL,\n        payload: file,\n    }\n}\n\nexport const rawDataLoadComplete = (result: ParseResult): RawDataTypes => {\n    return {\n        type: RAW_DATA_LOAD_COMPLETE,\n        payload: result,\n    }\n}\n\n// ----------------- State --------------- //\nexport interface RawDataState {\n    data: RawData | null\n    errors: Array<ParseError>\n}\n\nconst initialState: RawDataState = {\n    data: null,\n    errors: [],\n}\n\n// ---------------- Reducer -------------- //\nexport function rawDataReducer(\n    state = initialState,\n    action: RawDataTypes\n): RawDataState {\n    switch (action.type) {\n        case RAW_DATA_LOAD_LOCAL:\n            return {\n                ...state,\n                data: null,\n                errors: [],\n            }\n        case RAW_DATA_LOAD_COMPLETE:\n            return {\n                ...state,\n                data: action.payload.data,\n                errors: action.payload.errors,\n            }\n        default:\n            return state\n    }\n}\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components/macro'\nimport { useDropzone } from 'react-dropzone'\nimport { rawDataLoadLocal } from '../store/raw-data'\nimport { useDispatch } from 'react-redux'\n\nexport interface Props {\n    className?: string\n}\n\nconst DragDropFile: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const dispatch = useDispatch()\n    const onDrop = useCallback(\n        ([file]) => {\n            dispatch(rawDataLoadLocal(file))\n        },\n        [dispatch]\n    )\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n        onDrop,\n    })\n\n    // TODO : i18n\n    return (\n        <div {...getRootProps()} className={className}>\n            <input {...getInputProps()} multiple={false} />\n            {isDragActive ? (\n                <p>Drop le fichier ici ...</p>\n            ) : (\n                <p>\n                    Drag n drop un fichier CSV ici, ou clique pour sélectionner\n                </p>\n            )}\n        </div>\n    )\n}\n\nexport default styled(React.memo(DragDropFile))``\n","import { FieldName } from '../types'\n\n// ------------- Action Types ------------ //\nexport const OUTPUT_OPTIONS_SET_PREFIX = 'OUTPUT_OPTIONS_SET_PREFIX'\nexport const OUTPUT_OPTIONS_SET_GROUP_BY_FIELD =\n    'OUTPUT_OPTIONS_SET_GROUP_BY_FIELD'\n\nexport interface SetOutputOptionsPrefix {\n    type: typeof OUTPUT_OPTIONS_SET_PREFIX\n    payload: string\n}\n\nexport interface SetOutputOptionsGroupByField {\n    type: typeof OUTPUT_OPTIONS_SET_GROUP_BY_FIELD\n    payload: string | null\n}\n\nexport type OutputOptionsTypes =\n    | SetOutputOptionsPrefix\n    | SetOutputOptionsGroupByField\n\n// ------------ Action Creators ---------- //\nexport const setOutputOptionsPrefix = (prefix: string): OutputOptionsTypes => {\n    return {\n        type: OUTPUT_OPTIONS_SET_PREFIX,\n        payload: prefix,\n    }\n}\n\nexport const setOutputOptionsGroupByField = (\n    fieldName: FieldName | null\n): OutputOptionsTypes => {\n    return {\n        type: OUTPUT_OPTIONS_SET_GROUP_BY_FIELD,\n        payload: fieldName,\n    }\n}\n\n// ----------------- State --------------- //\nexport interface OutputOptionsState {\n    prefix: string\n    groupByField: FieldName | null\n}\n\nconst initialState: OutputOptionsState = {\n    prefix: 'XR ACTION ',\n    groupByField: null,\n}\n\n// ---------------- Reducer -------------- //\nexport function outoutOptionsReducer(\n    state = initialState,\n    action: OutputOptionsTypes\n): OutputOptionsState {\n    switch (action.type) {\n        case OUTPUT_OPTIONS_SET_PREFIX:\n            return { ...state, prefix: action.payload }\n        case OUTPUT_OPTIONS_SET_GROUP_BY_FIELD:\n            return { ...state, groupByField: action.payload }\n        default:\n            return state\n    }\n}\n","import { FieldName, SelectOptionValue } from '../types'\n\nexport const rawDataFieldNameToOption = (\n    rawDataFieldName: FieldName\n): SelectOptionValue => ({\n    value: rawDataFieldName,\n    label: rawDataFieldName,\n})\n","import Select from 'react-select'\nimport styled from 'styled-components/macro'\nimport theme from '../theme'\n\n// Wrapping in styled component allows to use the exported component\n// as a selector directly in other styled-components css code.\nexport default styled(Select)`\n    .react-select__control {\n        background-color: ${theme.colors.backgroundButton};\n        border-color: ${theme.colors.main};\n        .react-select__single-value {\n            color: ${theme.colors.main};\n        }\n    }\n`\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport {\n    setOutputOptionsPrefix,\n    setOutputOptionsGroupByField,\n} from '../store/output-options'\nimport {\n    selectOutputOptionsGroupByField,\n    selectOutputOptionsPrefix,\n    selectRawDataHeaders,\n} from '../store/selectors'\nimport { SelectOptionValue } from '../types'\nimport { rawDataFieldNameToOption } from '../utils/select-field'\nimport StyledSelect from './StyledSelect'\n\n// TODO : i18n\nconst GROUP_BY_FIELD_DEFAULT_OPTION = { value: null, label: 'DÉSACTIVÉ' }\n\nexport interface Props {\n    className?: string\n}\n\nconst OutputOptions: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const dispatch = useDispatch()\n    const prefix = useSelector(selectOutputOptionsPrefix)\n    const groupByField = useSelector(selectOutputOptionsGroupByField)\n    const rawDataHeaders = useSelector(selectRawDataHeaders)\n    const groupByFieldOptions = [\n        GROUP_BY_FIELD_DEFAULT_OPTION,\n        ...rawDataHeaders.map(rawDataFieldNameToOption),\n    ]\n    // TODO : i18n\n\n    const onChangePrefix = (event: React.FormEvent<HTMLInputElement>) =>\n        dispatch(setOutputOptionsPrefix(event.currentTarget.value))\n    const onChangeGroupByField = (option: SelectOptionValue) =>\n        dispatch(setOutputOptionsGroupByField(option.value))\n\n    return (\n        <div className={className}>\n            {/* TODO : i18n */}\n            <div>\n                <label htmlFor=\"outputOptionsPrefix\">Prefix</label>\n                <input\n                    type=\"text\"\n                    name=\"outputOptionsPrefix\"\n                    id=\"outputOptionsPrefix\"\n                    value={prefix}\n                    onChange={onChangePrefix}\n                />\n            </div>\n            <div>\n                <label htmlFor=\"groupByField\">Grouper par champ</label>\n                <StyledSelect\n                    id=\"outputOptionsGroupByField\"\n                    classNamePrefix=\"react-select\"\n                    options={groupByFieldOptions}\n                    value={\n                        groupByField\n                            ? rawDataFieldNameToOption(groupByField)\n                            : GROUP_BY_FIELD_DEFAULT_OPTION\n                    }\n                    onChange={onChangeGroupByField}\n                />\n            </div>\n        </div>\n    )\n}\n\n// Wrapping in styled component allows to use the exported component\n// as a selector directly in other styled-components css code.\nexport default styled(React.memo(OutputOptions))`\n    input {\n        margin-left: 1em;\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport theme from '../../theme'\nimport { ParseError } from '../../utils/parsing'\n\nexport interface Props {\n    errors: Array<ParseError>\n    className?: string\n}\n\nconst DataTableErrors: React.FunctionComponent<Props> = ({\n    errors,\n    className = '',\n}) => {\n    let errorsTitle: null | React.ReactFragment = null\n    if (errors.length) {\n        // TODO : i18n\n        errorsTitle = (\n            <div>Il y a {errors.length} erreur(s) dans le fichier :</div>\n        )\n    }\n    return (\n        <div className={className}>\n            {errorsTitle}\n            {errors.map((error, i) => (\n                <div key={i}>{error.message}</div>\n            ))}\n        </div>\n    )\n}\n\nexport default styled(React.memo(DataTableErrors))`\n    & > div {\n        color: ${theme.colors.error};\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { DataHeaders } from '../../types'\n\nexport interface Props {\n    headers: DataHeaders\n    className?: string\n}\n\nconst DataTableHeaders: React.FunctionComponent<Props> = ({\n    headers,\n    className = '',\n}) => {\n    return (\n        <tr className={className}>\n            {headers.map((fieldName) => (\n                <th key={fieldName}>{fieldName}</th>\n            ))}\n        </tr>\n    )\n}\n\nexport default styled(React.memo(DataTableHeaders))`\n    th {\n        text-align: left;\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { DataHeaders, AnyDatum } from '../../types'\n\nexport interface Props {\n    datum: AnyDatum\n    headers: DataHeaders\n    className?: string\n}\n\nconst DataTableRow: React.FunctionComponent<Props> = ({\n    datum,\n    headers,\n    className = '',\n}) => {\n    return (\n        <tr className={className}>\n            {headers.map((header) => (\n                <td key={header}>{datum[header]}</td>\n            ))}\n        </tr>\n    )\n}\n\nexport default styled(React.memo(DataTableRow))``\n","import React, { PropsWithChildren } from 'react'\nimport styled from 'styled-components/macro'\nimport theme from '../../theme'\nimport { DataHeaders } from '../../types'\nimport DataTableErrors from './DataTableErrors'\nimport DataTableHeaders from './DataTableHeaders'\nimport DataTableRow from './DataTableRow'\n\nexport interface Props<D> {\n    className?: string\n    data: Array<D>\n    headers: DataHeaders\n    headersDisplayMapping?: { [fieldName: string]: string }\n    errors: Array<Error>\n}\n\nconst DataTable = <D,>({\n    data,\n    headers,\n    headersDisplayMapping,\n    errors,\n    className = '',\n}: PropsWithChildren<Props<D>>) => {\n    const headersDisplay = headersDisplayMapping\n        ? headers.map(\n              (fieldName) => headersDisplayMapping[fieldName] || fieldName\n          )\n        : headers\n    return (\n        <div className={className}>\n            <DataTableContainer>\n                <table>\n                    <thead>\n                        <DataTableHeaders headers={headersDisplay} />\n                    </thead>\n                    <tbody>\n                        {data.map((datum, i) => (\n                            <DataTableRow\n                                datum={datum}\n                                headers={headers}\n                                key={i}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </DataTableContainer>\n            <DataTableErrors errors={errors} />\n        </div>\n    )\n}\n\nconst DataTableContainer = styled.div``\n\nexport default styled(React.memo(DataTable))`\n    color: ${theme.colors.tableContent};\n    ${DataTableContainer} {\n        position: relative;\n        max-height: 10em;\n        overflow: auto;\n\n        table {\n            width: 100%;\n        }\n    }\n`\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport {\n    selectRawDataSafe,\n    selectRawDataErrors,\n    selectRawDataHeaders,\n} from '../store/selectors'\nimport DataTable from './DataTable/DataTable'\n\nexport interface Props {\n    className?: string\n}\n\nconst RawDataView: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const data = useSelector(selectRawDataSafe)\n    const headers = useSelector(selectRawDataHeaders)\n    const errors = useSelector(selectRawDataErrors)\n    if (!data) {\n        return null\n    }\n    return <DataTable data={data} headers={headers} errors={errors} />\n}\n\nexport default styled(React.memo(RawDataView))``\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport {\n    selectVcfContactsAndErrors,\n    selectVcfFieldMapping,\n} from '../store/selectors'\nimport { NO_GROUPING_KEY } from '../utils/group-by-field'\nimport { VCF_FIELD_NAMES_DISPLAY, VcfFieldName } from '../utils/vcf'\nimport DataTable from './DataTable/DataTable'\n\n// TODO : i18n\nconst NO_GROUP_NAME_LABEL = 'GROUPE SANS NOM'\n\nexport interface Props {\n    className?: string\n}\n\nconst Component: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const vcfContactsAndErrors = useSelector(selectVcfContactsAndErrors)\n    const vcfFieldMapping = useSelector(selectVcfFieldMapping)\n    const headers = Object.entries(vcfFieldMapping)\n        .filter(([_, rawDataFieldName]) => rawDataFieldName !== null)\n        .map(([vcfFieldName]) => vcfFieldName as unknown as VcfFieldName)\n\n    return (\n        <Container>\n            {Object.entries(vcfContactsAndErrors).map(\n                ([group, { vcfContacts, errors }]) => (\n                    <GroupContainer>\n                        {group !== NO_GROUPING_KEY ? (\n                            <h3>\n                                {group.length ? group : NO_GROUP_NAME_LABEL}\n                            </h3>\n                        ) : null}\n                        <DataTable\n                            className={className}\n                            data={vcfContacts}\n                            headers={headers}\n                            headersDisplayMapping={VCF_FIELD_NAMES_DISPLAY}\n                            errors={errors}\n                        />\n                    </GroupContainer>\n                )\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.div``\nconst GroupContainer = styled.div`\n    margin: 1rem 0;\n`\n\nexport default styled(React.memo(Component))``\n","import { getEmptyVcfFieldMapping, VcfFieldMapping } from '../utils/vcf'\n\n// ------------- Action Types ------------ //\nexport const VCF_FIELD_MAPPING_SET = 'VCF_FIELD_MAPPING_SET'\n\nexport interface SetVcfFieldMapping {\n    type: typeof VCF_FIELD_MAPPING_SET\n    payload: Partial<VcfFieldMapping>\n}\n\nexport type VcfFieldMappingTypes = SetVcfFieldMapping\n\n// ------------ Action Creators ---------- //\nexport const setVcfFieldMapping = (\n    fieldMapping: Partial<VcfFieldMapping>\n): VcfFieldMappingTypes => {\n    return {\n        type: VCF_FIELD_MAPPING_SET,\n        payload: fieldMapping,\n    }\n}\n\n// ----------------- State --------------- //\nconst initialState: VcfFieldMapping = getEmptyVcfFieldMapping()\n\n// ---------------- Reducer -------------- //\nexport function vcfFieldMappingReducer(\n    state = initialState,\n    action: VcfFieldMappingTypes\n): VcfFieldMapping {\n    switch (action.type) {\n        case VCF_FIELD_MAPPING_SET:\n            return { ...state, ...action.payload }\n        default:\n            return state\n    }\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { SelectOptionValue } from '../../types'\nimport {\n    VcfFieldMapping,\n    VcfFieldName,\n    VCF_FIELD_NAMES,\n    VCF_FIELD_NAMES_REQUIRED,\n} from '../../utils/vcf'\nimport { useDispatch } from 'react-redux'\nimport { setVcfFieldMapping } from '../../store/vcf-field-mapping'\nimport StyledSelect from '../StyledSelect'\n\nconst vcfFieldNameToOption = (vcfFieldName: VcfFieldName) => ({\n    value: vcfFieldName,\n    label: vcfFieldName,\n})\n\nexport interface Props {\n    vcfFieldMapping: VcfFieldMapping\n    className?: string\n}\n\nconst AddOptionalVcfField: React.FunctionComponent<Props> = ({\n    vcfFieldMapping,\n    className = '',\n}) => {\n    const dispatch = useDispatch()\n    const [isAddingVcfField, setIsAddingVcfField] = useState(false)\n    const [selectedVcfFieldName, setSelectedVcfFieldName] =\n        useState<null | VcfFieldName>(null)\n\n    const vcfFieldOptions = VCF_FIELD_NAMES.filter(\n        (vcfFieldName) => !VCF_FIELD_NAMES_REQUIRED.includes(vcfFieldName)\n    )\n        .filter((vcfFieldName) => vcfFieldMapping[vcfFieldName] === null)\n        .map(vcfFieldNameToOption)\n\n    const onAddFieldClicked = () => {\n        setSelectedVcfFieldName(null)\n        setIsAddingVcfField(!isAddingVcfField)\n    }\n    const onSelectChanged = (option: SelectOptionValue) =>\n        setSelectedVcfFieldName(option.value as VcfFieldName)\n\n    const onOkClicked = () => {\n        if (!selectedVcfFieldName) {\n            return\n        }\n        dispatch(setVcfFieldMapping({ [selectedVcfFieldName]: '' }))\n        setSelectedVcfFieldName(null)\n        setIsAddingVcfField(false)\n    }\n    return (\n        <div className={className}>\n            <button onClick={onAddFieldClicked}>\n                {/* TODO : i18n */}\n                {isAddingVcfField ? '✕' : 'Ajouter champ'}\n            </button>\n            {isAddingVcfField ? (\n                <StyledSelect\n                    options={vcfFieldOptions}\n                    onChange={onSelectChanged}\n                    value={\n                        selectedVcfFieldName\n                            ? vcfFieldNameToOption(selectedVcfFieldName)\n                            : null\n                    }\n                    classNamePrefix=\"react-select\"\n                ></StyledSelect>\n            ) : null}\n            {/* TODO : i18n */}\n            {isAddingVcfField ? (\n                <button\n                    disabled={selectedVcfFieldName === null}\n                    onClick={onOkClicked}\n                >\n                    Ok\n                </button>\n            ) : null}\n        </div>\n    )\n}\n\nexport default styled(React.memo(AddOptionalVcfField))`\n    display: flex;\n    ${StyledSelect} {\n        width: 60%;\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { DataHeaders, FieldName, SelectOptionValue } from '../../types'\nimport { setVcfFieldMapping } from '../../store/vcf-field-mapping'\nimport { useDispatch } from 'react-redux'\nimport {\n    VCF_FIELD_NAMES_DISPLAY,\n    VcfFieldName,\n    VCF_FIELD_NAMES_REQUIRED,\n} from '../../utils/vcf'\nimport StyledSelect from '../StyledSelect'\nimport { rawDataFieldNameToOption } from '../../utils/select-field'\n\nexport interface Props {\n    vcfFieldName: VcfFieldName\n    choices: DataHeaders\n    selected: FieldName | null\n    className?: string\n}\n\nconst FieldPicker: React.FunctionComponent<Props> = ({\n    choices,\n    vcfFieldName,\n    selected,\n    className = '',\n}) => {\n    const isRequiredVcfField = VCF_FIELD_NAMES_REQUIRED.includes(vcfFieldName)\n    const dispatch = useDispatch()\n    const options = choices.map(rawDataFieldNameToOption)\n    const displayVcfFieldName =\n        (VCF_FIELD_NAMES_DISPLAY as any)[vcfFieldName] || vcfFieldName\n    const onValueChange = (option: SelectOptionValue) =>\n        dispatch(setVcfFieldMapping({ [vcfFieldName]: option.value }))\n    const onCloseClicked = () =>\n        dispatch(setVcfFieldMapping({ [vcfFieldName]: null }))\n    return (\n        <div className={className}>\n            <VcfFieldNameContainer>{displayVcfFieldName}</VcfFieldNameContainer>\n            <ArrowContainer>→</ArrowContainer>\n            <StyledSelect\n                classNamePrefix=\"react-select\"\n                options={options}\n                value={selected ? rawDataFieldNameToOption(selected) : null}\n                onChange={onValueChange}\n            />\n            {isRequiredVcfField ? null : (\n                <button onClick={onCloseClicked}>✕</button>\n            )}\n        </div>\n    )\n}\n\nconst VcfFieldNameContainer = styled.span``\nconst ArrowContainer = styled.span``\n\nexport default styled(React.memo(FieldPicker))`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    ${VcfFieldNameContainer} {\n        width: 30%;\n    }\n    ${ArrowContainer} {\n        font-size: 200%;\n    }\n    ${StyledSelect} {\n        width: 60%;\n    }\n`\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport {\n    selectRawDataHeaders,\n    selectVcfFieldMapping,\n} from '../../store/selectors'\nimport { VCF_FIELD_NAMES } from '../../utils/vcf'\nimport AddOptionalVcfField from './AddOptionalVcfField'\nimport FieldPicker from './FieldPicker'\n\nexport interface Props {\n    className?: string\n}\n\nconst VcfFieldMapper: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const rawDataHeaders = useSelector(selectRawDataHeaders)\n    const vcfFieldMapping = useSelector(selectVcfFieldMapping)\n    return (\n        <div className={className}>\n            {VCF_FIELD_NAMES.map((vcfFieldName) =>\n                vcfFieldMapping[vcfFieldName] !== null ? (\n                    <FieldPicker\n                        key={vcfFieldName}\n                        vcfFieldName={vcfFieldName}\n                        choices={rawDataHeaders}\n                        selected={vcfFieldMapping[vcfFieldName]}\n                    />\n                ) : null\n            )}\n            <AddOptionalVcfField vcfFieldMapping={vcfFieldMapping} />\n        </div>\n    )\n}\n\nexport default styled(React.memo(VcfFieldMapper))`\n    ${FieldPicker} {\n        margin-bottom: 0.5em;\n    }\n`\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport AppPanel from './components/AppPanel'\nimport DownloadVcfFile from './components/DownloadVcfFile'\nimport DragDropFile from './components/DragDropFile'\nimport OutputOptions from './components/OutputOptions'\nimport RawDataView from './components/RawDataView'\nimport VcfContactsView from './components/VcfContactsView'\nimport VcfFieldMapper from './components/VcfFieldMapper/VcfFieldMapper'\nimport { selectRawData } from './store/selectors'\n\nconst App = ({ className = '' }) => {\n    const rawData = useSelector(selectRawData)\n    return (\n        <div className={className}>\n            {/* TODO : i18n */}\n            <h1>Générateur de fichier de contacts</h1>\n            <AppPanel title=\"1. Upload un fichier CSV\">\n                <DragDropFile />\n            </AppPanel>\n            {rawData ? (\n                <AppPanel title=\"2. Aperçu des données brutes\">\n                    <RawDataView />\n                </AppPanel>\n            ) : null}\n            {rawData ? (\n                <AppPanel title=\"3. Selection des champs à exporter\">\n                    <VcfFieldMapper />\n                </AppPanel>\n            ) : null}\n            {rawData ? (\n                <AppPanel title=\"4. Options\">\n                    <OutputOptions />\n                </AppPanel>\n            ) : null}\n            {rawData ? (\n                <AppPanel title=\"5. Aperçu des contacts exportés\">\n                    <VcfContactsView />\n                </AppPanel>\n            ) : null}\n            {rawData ? (\n                <AppPanel title=\"6. Export\">\n                    <DownloadVcfFile />\n                </AppPanel>\n            ) : null}\n        </div>\n    )\n}\n\nexport default styled(React.memo(App))`\n    height: 100%;\n    overflow: auto;\n    max-width: 1000px;\n    margin: auto;\n`\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import Papa from 'papaparse'\nimport { RawDatum, RawData } from '../types'\n\nexport class ParseError extends Error {}\n\n// TODO : i18n\nconst normalizePapaParseError = (\n    error: Papa.ParseError,\n    data: RawData\n): ParseError => {\n    let message = ''\n    if (data[error.row]) {\n        message = `line ${error.row} (${error.message}) : ${Object.values(\n            data[error.row]\n        ).join(', ')}`\n    } else {\n        message = `line ${error.row} ${error.message}`\n    }\n    return new ParseError(message)\n}\n\nexport interface ParseResult {\n    data: RawData\n    errors: Array<ParseError>\n}\n\nexport const parseCsv = async (file: File): Promise<ParseResult> => {\n    return new Promise((resolve) => {\n        Papa.parse<RawDatum>(file, {\n            header: true,\n            skipEmptyLines: true,\n            complete: (results) => {\n                let data: RawData = results.data\n                let errors: ParseResult['errors'] = []\n                if (results.errors.length) {\n                    // Remove errored rows\n                    const erroredRows = results.errors.map((error) => error.row)\n                    data = data.filter((d, i) => !erroredRows.includes(i))\n                    errors = results.errors.map((error) =>\n                        normalizePapaParseError(error, results.data)\n                    )\n                }\n                resolve({ data, errors })\n            },\n        })\n    })\n}\n","import {\n    all,\n    takeLatest,\n    call,\n    put,\n    StrictEffect,\n    select,\n} from 'redux-saga/effects'\nimport { parseCsv, ParseResult } from '../utils/parsing'\nimport { getDefaultVcfFieldMapping } from '../utils/vcf'\nimport {\n    RAW_DATA_LOAD_LOCAL,\n    rawDataLoadComplete,\n    RawDataLoadLocal,\n} from './raw-data'\nimport { selectRawDataHeaders } from './selectors'\nimport { setVcfFieldMapping } from './vcf-field-mapping'\n\nfunction* rawDataLoadLocalSaga(\n    action: RawDataLoadLocal\n): Generator<StrictEffect, void, never> {\n    const result: ParseResult = yield call(parseCsv, action.payload)\n    yield put(rawDataLoadComplete(result))\n    const headers = yield select(selectRawDataHeaders)\n    yield put(setVcfFieldMapping(getDefaultVcfFieldMapping(headers)))\n}\n\nfunction* rawDataLoadSaga(): Generator<StrictEffect, void, never> {\n    yield takeLatest(RAW_DATA_LOAD_LOCAL, rawDataLoadLocalSaga)\n}\n\nexport default function* rootSaga() {\n    yield all([rawDataLoadSaga()])\n}\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux'\nimport rootSaga from './sagas'\nimport createSagaMiddleware from 'redux-saga'\nimport { rawDataReducer } from './raw-data'\nimport { vcfFieldMappingReducer } from './vcf-field-mapping'\nimport { outoutOptionsReducer } from './output-options'\n\nconst rootReducer = combineReducers({\n    rawData: rawDataReducer,\n    vcfFieldMapping: vcfFieldMappingReducer,\n    outputOptions: outoutOptionsReducer,\n})\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nconst enhancers = [applyMiddleware(sagaMiddleware)]\nif (\n    process.env.NODE_ENV === 'development' &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__\n) {\n    enhancers.push(\n        (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n    )\n}\n\nconst preloadedState = {}\n\nexport const store = createStore(\n    rootReducer,\n    preloadedState,\n    compose(...enhancers)\n)\n\nsagaMiddleware.run(rootSaga)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { createGlobalStyle } from 'styled-components'\nimport theme from './theme'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n    a {\n        text-decoration: none;\n    }\n\n    body {\n        overflow: hidden;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 16px;\n    }\n\n    html,\n    body,\n    #root {\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n    }\n\n    body {\n        color: ${theme.colors.main};\n        background-color: ${theme.colors.background};\n        font-size: ${theme.fontSizes.desktop}px;\n        @media (max-width: ${theme.dimensions.thresholdMobile}px) {\n            font-size: ${theme.fontSizes.mobile}px;\n        }\n        font-family: ${theme.fonts.default};\n    }\n\n    *::-webkit-scrollbar {\n        width: 0.5em;\n        height: 0.5em;\n    }\n       \n    *::-webkit-scrollbar-thumb {\n        background-color: ${theme.colors.scrollBg};\n        outline: 1px solid ${theme.colors.scrollBg};\n    }\n\n    * {\n        scrollbar-color: ${theme.colors.scroll} ${theme.colors.scrollBg};\n        scrollbar-width: thin;\n    }\n\n    button, input {\n        border:  1px ${theme.colors.main} solid;\n        border-radius: 0.3em;\n        font-family: ${theme.fonts.default};\n        color: ${theme.colors.main};\n        padding: 0.5em;\n    }\n\n    button {\n        background-color: ${theme.colors.backgroundButton};\n    }\n\n    input {\n        background-color: transparent;\n    }\n\n    h1, h2 {\n        font-family: ${theme.fonts.titles};\n    }\n\n    h2 {\n        color: ${theme.colors.title2};\n    }\n\n    /* TODO : Move from here */\n    .react-select__menu-list {\n        background-color: ${theme.colors.background2};\n        .react-select__option {\n            background-color: ${theme.colors.background2};\n            cursor: pointer;\n            &.react-select__option--is-focused {\n                background-color: ${theme.colors.highlight};\n            }\n        }\n    }\n`\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}