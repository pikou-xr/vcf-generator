{"version":3,"sources":["theme.ts","components/AppPanel.tsx","utils/formatting.ts","utils/vcf.ts","store/selectors.ts","components/DownloadVcfFile.tsx","utils/browser.ts","store/raw-data.ts","components/DragDropFile.tsx","store/output-options.ts","components/OutputOptions.tsx","components/DataTable/DataTableErrors.tsx","components/DataTable/DataTableHeaders.tsx","components/DataTable/DataTableRow.tsx","components/DataTable/DataTable.tsx","components/RawDataView.tsx","components/VcfContactsView.tsx","store/vcf-field-mapping.ts","components/StyledSelect.tsx","components/VcfFieldMapper/AddOptionalVcfField.tsx","components/VcfFieldMapper/FieldPicker.tsx","components/VcfFieldMapper/VcfFieldMapper.tsx","App.tsx","reportWebVitals.ts","utils/parsing.ts","store/sagas.ts","store/index.ts","index.tsx"],"names":["theme","colors","main","title2","highlight","background","background2","backgroundButton","error","scroll","scrollBg","fontSizes","desktop","mobile","dimensions","thresholdMobile","fonts","default","AppPanel","title","children","className","Container","styled","div","React","memo","FormatError","Error","GUESS_PHONE_FIELD_NAME","GUESS_NAME_FIELD_NAME","VCF_FIELD_NAMES","VCF_FIELD_NAMES_REQUIRED","VCF_FIELD_NAMES_DISPLAY","getDefaultVcfFieldMapping","headers","phoneFieldName","filter","word","includes","firstName","workPhone","email","note","selectRawData","state","rawData","data","selectRawDataSafe","selectRawDataErrors","errors","selectRawDataHeaders","length","Object","keys","selectVcfFieldMapping","vcfFieldMapping","selectVcfContactsAndErrors","fieldMapping","prefix","selectOutputOptionsPrefix","vcfContacts","forEach","vcfContact","contactError","vcfFieldName","rawDataFieldName","value","phoneString","phoneNumber","parsePhoneNumberFromString","isValid","number","formatPhoneNumber","err","push","outputOptions","FILENAME","DownloadVcfFile","useSelector","onClick","vCardStr","contacts","vCardStrings","contact","vCard","vCardsJS","entries","name","getFormattedString","join","contactsToVcard","filename","contents","type","blob","Blob","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","forceDownload","RAW_DATA_LOAD_LOCAL","RAW_DATA_LOAD_COMPLETE","rawDataLoadComplete","result","payload","initialState","DragDropFile","dispatch","useDispatch","onDrop","useCallback","file","rawDataLoadLocal","useDropzone","getRootProps","getInputProps","isDragActive","multiple","OUTPUT_OPTIONS_SET_PREFIX","OutputOptions","htmlFor","id","onChange","event","setOutputOptionsPrefix","currentTarget","DataTableErrors","errorsTitle","map","i","message","DataTableHeaders","fieldName","DataTableRow","datum","header","DataTable","headersDisplayMapping","headersDisplay","DataTableContainer","RawDataView","Component","VCF_FIELD_MAPPING_SET","setVcfFieldMapping","Select","vcfFieldNameToOption","label","AddOptionalVcfField","useState","isAddingVcfField","setIsAddingVcfField","selectedVcfFieldName","setSelectedVcfFieldName","vcfFieldOptions","StyledSelect","options","option","classNamePrefix","disabled","rawDataFieldNameToOption","FieldPicker","choices","selected","isRequiredVcfField","displayVcfFieldName","VcfFieldNameContainer","ArrowContainer","span","VcfFieldMapper","rawDataHeaders","App","VcfContactsView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ParseError","normalizePapaParseError","row","values","parseCsv","a","Promise","resolve","Papa","parse","skipEmptyLines","complete","results","erroredRows","d","rawDataLoadLocalSaga","rawDataLoadSaga","rootSaga","action","call","put","select","takeLatest","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","enhancers","applyMiddleware","store","createStore","compose","run","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f2e73a4.chunk.js","sourcesContent":["const theme = {\n    colors: {\n        main: 'white',\n        title2: '#222',\n        highlight: 'green',\n        background: '#222',\n        background2: '#555',\n        backgroundButton: '#777',\n        error: 'red',\n        scroll: 'green',\n        scrollBg: 'black',\n    },\n    fontSizes: {\n        desktop: 16,\n        mobile: 12\n    },\n    dimensions: {\n        thresholdMobile: 720\n    },\n    fonts: {\n        default: 'arial'\n    }\n}\n\nexport default theme","import React, { PropsWithChildren } from 'react'\nimport styled from 'styled-components/macro'\nimport theme from '../theme'\n\nexport type Props = PropsWithChildren<{\n    title: string\n    className?: string\n}>\n\nconst AppPanel: React.FunctionComponent<Props> = ({ \n    title,\n    children,\n    className = ''\n}) => {\n    return (\n        <div className={className}>\n            <h2>{title}</h2>\n            <Container>\n                {children}\n            </Container>\n        </div>\n    )\n}\n\nconst Container = styled.div``\nexport default styled(React.memo(AppPanel))`\n    padding: 0.5em;\n    margin: 0.5em;\n    background-color: ${theme.colors.background2};\n    h2 {\n        margin-bottom: 0.5em;\n    }\n`","import {parsePhoneNumberFromString} from 'libphonenumber-js'\nimport { PhoneNumber } from '../types'\n\nexport class FormatError extends Error {}\n\nexport const formatPhoneNumber = (phoneString: string): PhoneNumber => {\n    // TODO : configutable country code\n    const phoneNumber = parsePhoneNumberFromString(phoneString, 'FR')\n    if (phoneNumber && phoneNumber.isValid()) {\n        return phoneNumber.number as PhoneNumber\n    }\n    // TODO : i18n\n    throw new FormatError(`Invalid phone number \"${phoneString}\"`)\n}\n","import { DataHeaders, FieldName, PhoneNumber } from '../types'\nimport vCardsJS from 'vcards-js'\n\nconst GUESS_PHONE_FIELD_NAME = ['téléphone', 'telephone', 'phone', 'phone number', 'numéro de téléphone']\nconst GUESS_NAME_FIELD_NAME = ['pseudo']\n\nexport const VCF_FIELD_NAMES: Array<VcfFieldName> = [\n    'firstName',\n    'workPhone',\n    'email',\n    'note',\n]\nexport const VCF_FIELD_NAMES_REQUIRED: Array<VcfFieldName> = [\n    'firstName',\n    'workPhone',\n]\n\n// TODO : i18n\nexport const VCF_FIELD_NAMES_DISPLAY = {\n    'workPhone': 'téléphone',\n    'firstName': 'nom',\n}\n\nexport interface VcfContact {\n    firstName: string\n    workPhone: PhoneNumber\n    email: string\n    note: string\n}\n\nexport type VcfFieldName = keyof VcfContact\n\nexport interface VcfFieldMapping {\n    firstName: FieldName | null\n    workPhone: FieldName | null\n    email: FieldName | null\n    note: FieldName | null\n}\n\nexport const getEmptyVcfFieldMapping = () => ({\n    firstName: null,\n    workPhone: null,\n    email: null,\n    note: null,\n})\n\nexport const getDefaultVcfFieldMapping = (\n    headers: DataHeaders\n): VcfFieldMapping => {\n    const phoneFieldName = GUESS_PHONE_FIELD_NAME.filter(word => headers.includes(word))[0]\n    const nameFieldName = GUESS_NAME_FIELD_NAME.filter(word => headers.includes(word))[0]\n    return {\n        firstName: nameFieldName || (headers[0] || null),\n        workPhone: phoneFieldName || (headers[1] || null),\n        email: null,\n        note: null,\n    }\n}\n\nexport const contactsToVcard = (contacts: Array<VcfContact>) => {\n    const vCardStrings = []\n    for (const contact of contacts) {\n        const vCard = vCardsJS()\n        Object.entries(contact).forEach(([name, value]) => vCard[name as VcfFieldName] = value)\n        vCardStrings.push(vCard.getFormattedString())\n    }\n    return vCardStrings.join('\\n')\n}","import { RootState } from \".\"\nimport { FormatError, formatPhoneNumber } from \"../utils/formatting\"\nimport { VcfContact, VCF_FIELD_NAMES } from \"../utils/vcf\"\n\nexport const selectRawData = (state: RootState) => \n    state.rawData.data\n\nexport const selectRawDataSafe = (state: RootState) => {\n    if (!state.rawData.data) {\n        throw new Error(`expected data not null`)\n    }\n    return state.rawData.data\n}\n\nexport const selectRawDataErrors = (state: RootState) => state.rawData.errors\n\nexport const selectRawDataHeaders = (state: RootState) => {\n    const rawData = selectRawDataSafe(state)\n    if (!rawData.length) {\n        return []\n    }\n    return Object.keys(rawData[0])\n}\n\nexport const selectVcfFieldMapping = (state: RootState) => \n    state.vcfFieldMapping\n\nexport const selectVcfContactsAndErrors = (state: RootState) => {\n    const rawData = selectRawDataSafe(state)\n    const fieldMapping = selectVcfFieldMapping(state)\n    const prefix = selectOutputOptionsPrefix(state)\n    const vcfContacts: Array<VcfContact> = []\n    const errors: Array<Error> = []\n    rawData.forEach(rawData => {\n        const vcfContact: Partial<VcfContact> = {}\n        let contactError: Error | null = null\n        VCF_FIELD_NAMES.forEach(vcfFieldName => {\n            const rawDataFieldName = fieldMapping[vcfFieldName]\n            if (rawDataFieldName) {\n                let value = rawData[rawDataFieldName]\n                if (vcfFieldName === 'firstName') {\n                    value = `${prefix}${value}`\n                }\n                if (vcfFieldName === 'workPhone') {\n                    try {\n                        value = formatPhoneNumber(value)\n                    } catch(err) {\n                        if (err instanceof FormatError) {\n                            contactError = err\n                        } else {\n                            throw err\n                        }\n                    }\n                }\n                vcfContact[vcfFieldName] = value\n            }\n        })\n        if (!contactError) {\n            vcfContacts.push(vcfContact as VcfContact)\n        } else {\n            errors.push(contactError)\n        }\n    })\n    return {vcfContacts, errors}\n}\n\nexport const selectOutputOptionsPrefix = (state: RootState) => \n    state.outputOptions.prefix","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport { selectVcfContactsAndErrors } from '../store/selectors'\nimport { forceDownload } from '../utils/browser'\nimport { contactsToVcard } from '../utils/vcf'\n\nconst FILENAME = 'contacts.vcf'\n\nexport interface Props {\n    className?: string\n}\n\nconst DownloadVcfFile: React.FunctionComponent<Props> = ({ \n    className = ''\n}) => {\n    const {vcfContacts} = useSelector(selectVcfContactsAndErrors)\n    const onDownloadClicked = () => {\n        const vCardStr = contactsToVcard(vcfContacts)\n        forceDownload(FILENAME, vCardStr, 'text/vcard')\n    }\n    return (\n        <div className={className}>\n            {/* TODO : i18n */}\n            <button onClick={onDownloadClicked}>Télécharger \"{FILENAME}\"</button>\n        </div>\n    )\n}\n\nexport default styled(React.memo(DownloadVcfFile))``","export const forceDownload = (\n    filename: string,\n    contents: string,\n    type: string\n) => {\n    const blob = new Blob([contents], { type })\n    if ((window.navigator as any).msSaveOrOpenBlob) {\n        window.navigator.msSaveBlob(blob, filename)\n    } else {\n        const elem = window.document.createElement('a')\n        elem.href = window.URL.createObjectURL(blob)\n        elem.download = filename\n        document.body.appendChild(elem)\n        elem.click()\n        document.body.removeChild(elem)\n    }\n}\n","import { RawData } from '../types'\nimport { ParseError, ParseResult } from '../utils/parsing'\n\n// ------------- Action Types ------------ //\nexport const RAW_DATA_LOAD_LOCAL = 'RAW_DATA_LOAD_LOCAL'\nexport const RAW_DATA_LOAD_COMPLETE = 'RAW_DATA_LOAD_COMPLETE'\nexport const RAW_DATA_LOAD_ERROR = 'RAW_DATA_LOAD_ERROR'\n\nexport interface RawDataLoadLocal {\n    type: typeof RAW_DATA_LOAD_LOCAL\n    payload: File\n}\n\nexport interface RawDataLoadComplete {\n    type: typeof RAW_DATA_LOAD_COMPLETE\n    payload: ParseResult\n}\n\nexport type RawDataTypes = RawDataLoadLocal | RawDataLoadComplete\n\n// ------------ Action Creators ---------- //\nexport const rawDataLoadLocal = (file: File): RawDataTypes => {\n    return {\n        type: RAW_DATA_LOAD_LOCAL,\n        payload: file,\n    }\n}\n\nexport const rawDataLoadComplete = (result: ParseResult): RawDataTypes => {\n    return {\n        type: RAW_DATA_LOAD_COMPLETE,\n        payload: result,\n    }\n}\n\n// ----------------- State --------------- //\nexport interface RawDataState {\n    data: RawData | null\n    errors: Array<ParseError>\n}\n\nconst initialState: RawDataState = {\n    data: null,\n    errors: [],\n}\n\n// ---------------- Reducer -------------- //\nexport function rawDataReducer(\n    state = initialState,\n    action: RawDataTypes\n): RawDataState {\n    switch (action.type) {\n        case RAW_DATA_LOAD_LOCAL:\n            return {\n                ...state,\n                data: null,\n                errors: [],\n            }\n        case RAW_DATA_LOAD_COMPLETE:\n            return {\n                ...state,\n                data: action.payload.data,\n                errors: action.payload.errors,\n            }\n        default:\n            return state\n    }\n}\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components/macro'\nimport { useDropzone } from 'react-dropzone'\nimport { rawDataLoadLocal } from '../store/raw-data'\nimport { useDispatch } from 'react-redux'\n\nexport interface Props {\n    className?: string\n}\n\nconst DragDropFile: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const dispatch = useDispatch()\n    const onDrop = useCallback(([file]) => {\n        dispatch(rawDataLoadLocal(file))\n    }, [dispatch])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n        onDrop,\n    })\n\n    // TODO : i18n\n    return (\n        <div {...getRootProps()} className={className}>\n            <input {...getInputProps()} multiple={false} />\n            {isDragActive ? (\n                <p>Drop the files here ...</p>\n            ) : (\n                <p>\n                    Drag 'n' drop some files here, or click to select files\n                </p>\n            )}\n        </div>\n    )\n}\n\nexport default styled(React.memo(DragDropFile))``\n","// ------------- Action Types ------------ //\nexport const OUTPUT_OPTIONS_SET_PREFIX = 'OUTPUT_OPTIONS_SET_PREFIX'\n\nexport interface SetOutputOptionsPrefix {\n    type: typeof OUTPUT_OPTIONS_SET_PREFIX\n    payload: string\n}\n\nexport type OutputOptionsTypes = SetOutputOptionsPrefix\n\n// ------------ Action Creators ---------- //\nexport const setOutputOptionsPrefix = (\n    prefix: string\n): OutputOptionsTypes => {\n    return {\n        type: OUTPUT_OPTIONS_SET_PREFIX,\n        payload: prefix,\n    }\n}\n\n// ----------------- State --------------- //\nexport interface OutputOptionsState {\n    prefix: string\n}\n\nconst initialState: OutputOptionsState = {\n    prefix: 'XR ACTION '\n}\n\n// ---------------- Reducer -------------- //\nexport function outoutOptionsReducer(\n    state = initialState,\n    action: OutputOptionsTypes\n): OutputOptionsState {\n    switch (action.type) {\n        case OUTPUT_OPTIONS_SET_PREFIX:\n            return {...state, prefix: action.payload}\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport { setOutputOptionsPrefix } from '../store/output-options'\nimport { selectOutputOptionsPrefix } from '../store/selectors'\n\nexport interface Props {\n    className?: string\n}\n\nconst OutputOptions: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const dispatch = useDispatch()\n    const prefix = useSelector(selectOutputOptionsPrefix)\n    const onChangePrefix = (event: React.FormEvent<HTMLInputElement>) =>\n        dispatch(setOutputOptionsPrefix(event.currentTarget.value))\n    return (\n        <div className={className}>\n            {/* TODO : i18n */}\n            <label htmlFor=\"outputOptionsPrefix\">Prefix</label>\n            <input\n                type=\"text\"\n                name=\"outputOptionsPrefix\"\n                id=\"outputOptionsPrefix\"\n                value={prefix}\n                onChange={onChangePrefix}\n            />\n        </div>\n    )\n}\n\n// Wrapping in styled component allows to use the exported component\n// as a selector directly in other styled-components css code.\nexport default styled(React.memo(OutputOptions))`\n    input {\n        margin-left: 1em;\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport theme from '../../theme'\nimport { ParseError } from '../../utils/parsing'\n\nexport interface Props {\n    errors: Array<ParseError>\n    className?: string\n}\n\nconst DataTableErrors: React.FunctionComponent<Props> = ({ \n    errors,\n    className = ''\n}) => {\n    let errorsTitle: null | React.ReactFragment = null\n    if (errors.length) {\n        // TODO : i18n\n        errorsTitle = <div>Il y a {errors.length} erreur(s) dans le fichier :</div>\n    }\n    return (\n        <div className={className}>\n            {errorsTitle}\n            {errors.map((error, i) => <div key={i}>{error.message}</div>)}\n        </div>\n    )\n}\n\nexport default styled(React.memo(DataTableErrors))`\n    & > div {\n        color: ${theme.colors.error};\n    }\n`","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { DataHeaders } from '../../types'\n\nexport interface Props {\n    headers: DataHeaders\n    className?: string\n}\n\nconst DataTableHeaders: React.FunctionComponent<Props> = ({ \n    headers,\n    className = ''\n}) => {\n    return (\n        <tr className={className}>\n            {headers.map(fieldName => <th key={fieldName}>{fieldName}</th>)}\n        </tr>\n    )\n}\n\nexport default styled(React.memo(DataTableHeaders))`\n    th {\n        text-align: left;\n    }\n`","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { DataHeaders, AnyDatum } from '../../types'\n\nexport interface Props {\n    datum: AnyDatum\n    headers: DataHeaders\n    className?: string\n}\n\nconst DataTableRow: React.FunctionComponent<Props> = ({ \n    datum, headers,\n    className = ''\n}) => {\n    return (\n        <tr className={className}>\n            {headers.map(header => <td key={header}>{datum[header]}</td>)}\n        </tr>\n    )\n}\n\nexport default styled(React.memo(DataTableRow))``","import React, { PropsWithChildren } from 'react'\nimport styled from 'styled-components/macro'\nimport { DataHeaders } from '../../types'\nimport DataTableErrors from './DataTableErrors'\nimport DataTableHeaders from './DataTableHeaders'\nimport DataTableRow from './DataTableRow'\n\nexport interface Props<D> {\n    className?: string\n    data: Array<D>\n    headers: DataHeaders\n    headersDisplayMapping?: { [fieldName: string]: string }\n    errors: Array<Error>\n}\n\nconst DataTable = <D,>({\n    data,\n    headers,\n    headersDisplayMapping,\n    errors,\n    className = '',\n}: PropsWithChildren<Props<D>>) => {\n    const headersDisplay = headersDisplayMapping\n        ? headers.map(\n              (fieldName) => headersDisplayMapping[fieldName] || fieldName\n          )\n        : headers\n    return (\n        <div className={className}>\n            <DataTableContainer>\n                <table>\n                    <thead>\n                        <DataTableHeaders headers={headersDisplay} />\n                    </thead>\n                    <tbody>\n                        {data.map((datum, i) => (\n                            <DataTableRow\n                                datum={datum}\n                                headers={headers}\n                                key={i}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </DataTableContainer>\n            <DataTableErrors errors={errors} />\n        </div>\n    )\n}\n\nconst DataTableContainer = styled.div``\n\nexport default styled(React.memo(DataTable))`\n    ${DataTableContainer} {\n        position: relative;\n        max-height: 10em;\n        overflow: auto;\n\n        table {\n            width: 100%;\n        }\n    }\n`","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport {\n    selectRawDataSafe,\n    selectRawDataErrors,\n    selectRawDataHeaders,\n} from '../store/selectors'\nimport DataTable from './DataTable/DataTable'\n\nexport interface Props {\n    className?: string\n}\n\nconst RawDataView: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const data = useSelector(selectRawDataSafe)\n    const headers = useSelector(selectRawDataHeaders)\n    const errors = useSelector(selectRawDataErrors)\n    if (!data) {\n        return null\n    }\n    return <DataTable data={data} headers={headers} errors={errors} />\n}\n\nexport default styled(React.memo(RawDataView))``\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport {\n    selectVcfContactsAndErrors,\n    selectVcfFieldMapping,\n} from '../store/selectors'\nimport { VCF_FIELD_NAMES_DISPLAY, VcfFieldName } from '../utils/vcf'\nimport DataTable from './DataTable/DataTable'\n\nexport interface Props {\n    className?: string\n}\n\nconst Component: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const { vcfContacts, errors } = useSelector(selectVcfContactsAndErrors)\n    const vcfFieldMapping = useSelector(selectVcfFieldMapping)\n    const headers = Object.entries(vcfFieldMapping)\n        .filter(([_, rawDataFieldName]) => rawDataFieldName !== null)\n        .map(([vcfFieldName]) => vcfFieldName as unknown as VcfFieldName)\n    return (\n        <DataTable\n            className={className}\n            data={vcfContacts}\n            headers={headers}\n            headersDisplayMapping={VCF_FIELD_NAMES_DISPLAY}\n            errors={errors}\n        />\n    )\n}\n\nexport default styled(React.memo(Component))``\n","import { getEmptyVcfFieldMapping, VcfFieldMapping } from '../utils/vcf'\n\n// ------------- Action Types ------------ //\nexport const VCF_FIELD_MAPPING_SET = 'VCF_FIELD_MAPPING_SET'\n\nexport interface SetVcfFieldMapping {\n    type: typeof VCF_FIELD_MAPPING_SET\n    payload: Partial<VcfFieldMapping>\n}\n\nexport type VcfFieldMappingTypes = SetVcfFieldMapping\n\n// ------------ Action Creators ---------- //\nexport const setVcfFieldMapping = (\n    fieldMapping: Partial<VcfFieldMapping>\n): VcfFieldMappingTypes => {\n    return {\n        type: VCF_FIELD_MAPPING_SET,\n        payload: fieldMapping,\n    }\n}\n\n// ----------------- State --------------- //\nconst initialState: VcfFieldMapping = getEmptyVcfFieldMapping()\n\n// ---------------- Reducer -------------- //\nexport function vcfFieldMappingReducer(\n    state = initialState,\n    action: VcfFieldMappingTypes\n): VcfFieldMapping {\n    switch (action.type) {\n        case VCF_FIELD_MAPPING_SET:\n            return {...state, ...action.payload}\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport Select from 'react-select'\nimport styled from 'styled-components/macro'\nimport theme from '../theme'\n\n\n\n// Wrapping in styled component allows to use the exported component \n// as a selector directly in other styled-components css code.\nexport default styled(Select)`\n    .react-select__control {\n        background-color: ${theme.colors.backgroundButton};\n        border-color: ${theme.colors.main};\n        .react-select__single-value {\n            color: ${theme.colors.main};\n        }\n    }\n`","import React, { useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { SelectOptionValue } from '../../types'\nimport {\n    VcfFieldMapping,\n    VcfFieldName,\n    VCF_FIELD_NAMES,\n    VCF_FIELD_NAMES_REQUIRED,\n} from '../../utils/vcf'\nimport { useDispatch } from 'react-redux'\nimport { setVcfFieldMapping } from '../../store/vcf-field-mapping'\nimport StyledSelect from '../StyledSelect'\n\nconst vcfFieldNameToOption = (vcfFieldName: VcfFieldName) => ({\n    value: vcfFieldName,\n    label: vcfFieldName,\n})\n\nexport interface Props {\n    vcfFieldMapping: VcfFieldMapping\n    className?: string\n}\n\nconst AddOptionalVcfField: React.FunctionComponent<Props> = ({\n    vcfFieldMapping,\n    className = '',\n}) => {\n    const dispatch = useDispatch()\n    const [isAddingVcfField, setIsAddingVcfField] = useState(false)\n    const [selectedVcfFieldName, setSelectedVcfFieldName] =\n        useState<null | VcfFieldName>(null)\n\n    const vcfFieldOptions = VCF_FIELD_NAMES.filter(\n        (vcfFieldName) => !VCF_FIELD_NAMES_REQUIRED.includes(vcfFieldName)\n    )\n        .filter((vcfFieldName) => vcfFieldMapping[vcfFieldName] === null)\n        .map(vcfFieldNameToOption)\n\n    const onAddFieldClicked = () => {\n        setSelectedVcfFieldName(null)\n        setIsAddingVcfField(!isAddingVcfField)\n    }\n    const onSelectChanged = (option: SelectOptionValue) =>\n        setSelectedVcfFieldName(option.value as VcfFieldName)\n\n    const onOkClicked = () => {\n        if (!selectedVcfFieldName) {\n            return\n        }\n        dispatch(setVcfFieldMapping({ [selectedVcfFieldName]: '' }))\n        setSelectedVcfFieldName(null)\n        setIsAddingVcfField(false)\n    }\n    return (\n        <div className={className}>\n            <button onClick={onAddFieldClicked}>\n                {/* TODO : i18n */}\n                {isAddingVcfField ? '✕' : 'Ajouter champ'}\n            </button>\n            {isAddingVcfField ? (\n                <StyledSelect\n                    options={vcfFieldOptions}\n                    onChange={onSelectChanged}\n                    value={selectedVcfFieldName ? vcfFieldNameToOption(selectedVcfFieldName): null}\n                    classNamePrefix='react-select'\n                ></StyledSelect>\n            ) : null}\n            {/* TODO : i18n */}\n            {isAddingVcfField ? (\n                <button\n                    disabled={selectedVcfFieldName === null}\n                    onClick={onOkClicked}\n                >\n                    Ok\n                </button>\n            ) : null}\n        </div>\n    )\n}\n\nexport default styled(React.memo(AddOptionalVcfField))`\n    display: flex;\n    ${StyledSelect} {\n        width: 60%;\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport {\n    DataHeaders,\n    FieldName,\n    SelectOptionValue,\n} from '../../types'\nimport { setVcfFieldMapping } from '../../store/vcf-field-mapping'\nimport { useDispatch } from 'react-redux'\nimport {\n    VCF_FIELD_NAMES_DISPLAY,\n    VcfFieldName,\n    VCF_FIELD_NAMES_REQUIRED,\n} from '../../utils/vcf'\nimport StyledSelect from '../StyledSelect'\n\nexport interface Props {\n    vcfFieldName: VcfFieldName\n    choices: DataHeaders\n    selected: FieldName | null\n    className?: string\n}\n\nconst rawDataFieldNameToOption = (rawDataFieldName: FieldName) => ({\n    value: rawDataFieldName,\n    label: rawDataFieldName,\n})\n\nconst FieldPicker: React.FunctionComponent<Props> = ({\n    choices,\n    vcfFieldName,\n    selected,\n    className = '',\n}) => {\n    const isRequiredVcfField = VCF_FIELD_NAMES_REQUIRED.includes(vcfFieldName)\n    const dispatch = useDispatch()\n    const options = choices.map(rawDataFieldNameToOption)\n    const displayVcfFieldName =\n        (VCF_FIELD_NAMES_DISPLAY as any)[vcfFieldName] || vcfFieldName\n    const onValueChange = (option: SelectOptionValue) =>\n        dispatch(setVcfFieldMapping({ [vcfFieldName]: option.value }))\n    const onCloseClicked = () =>\n        dispatch(setVcfFieldMapping({ [vcfFieldName]: null }))\n    return (\n        <div className={className}>\n            <VcfFieldNameContainer>{displayVcfFieldName}</VcfFieldNameContainer>\n            <ArrowContainer>→</ArrowContainer>\n            <StyledSelect\n                classNamePrefix='react-select'\n                options={options}\n                value={selected ? rawDataFieldNameToOption(selected) : null}\n                onChange={onValueChange}\n            />\n            {isRequiredVcfField ? null : (\n                <button onClick={onCloseClicked}>✕</button>\n            )}\n        </div>\n    )\n}\n\nconst VcfFieldNameContainer = styled.span``\nconst ArrowContainer = styled.span``\n\nexport default styled(React.memo(FieldPicker))`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    ${VcfFieldNameContainer} {\n        width: 30%;\n    }\n    ${ArrowContainer} {\n        font-size: 200%;\n    }\n    ${StyledSelect} {\n        width: 60%;\n    }\n`\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport { selectRawDataHeaders, selectVcfFieldMapping } from '../../store/selectors'\nimport { VCF_FIELD_NAMES } from '../../utils/vcf'\nimport AddOptionalVcfField from './AddOptionalVcfField'\nimport FieldPicker from './FieldPicker'\n\nexport interface Props {\n    className?: string\n}\n\nconst VcfFieldMapper: React.FunctionComponent<Props> = ({ className = '' }) => {\n    const rawDataHeaders = useSelector(selectRawDataHeaders)\n    const vcfFieldMapping = useSelector(selectVcfFieldMapping)\n    return (\n        <div className={className}>\n            {VCF_FIELD_NAMES.map((vcfFieldName) => (\n                vcfFieldMapping[vcfFieldName] !== null ? (<FieldPicker\n                    key={vcfFieldName}\n                    vcfFieldName={vcfFieldName}\n                    choices={rawDataHeaders}\n                    selected={vcfFieldMapping[vcfFieldName]}\n                />) : null\n            ))}\n            <AddOptionalVcfField vcfFieldMapping={vcfFieldMapping} />\n        </div>\n    )\n}\n\nexport default styled(React.memo(VcfFieldMapper))`\n    ${FieldPicker} {\n        margin-bottom : 0.5em;\n    }\n`\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport AppPanel from './components/AppPanel'\nimport DownloadVcfFile from './components/DownloadVcfFile'\nimport DragDropFile from './components/DragDropFile'\nimport OutputOptions from './components/OutputOptions'\nimport RawDataView from './components/RawDataView'\nimport VcfContactsView from './components/VcfContactsView'\nimport VcfFieldMapper from './components/VcfFieldMapper/VcfFieldMapper'\nimport { selectRawData } from './store/selectors'\n\nconst App = ({ className = '' }) => {\n    const rawData = useSelector(selectRawData)\n    return (\n        <div className={className}>\n            <AppPanel title=\"1. Upload un fichier CSV\"><DragDropFile /></AppPanel>\n            {rawData ? <AppPanel title=\"2. Données brutes\"><RawDataView /></AppPanel> : null}\n            {rawData ? <AppPanel title=\"3. Selection des champs à exporter\"><VcfFieldMapper /></AppPanel> : null}\n            {rawData ? <AppPanel title=\"4. Données exportées\"><VcfContactsView /></AppPanel> : null}\n            {rawData ? <AppPanel title=\"5. Options\"><OutputOptions /></AppPanel> : null}\n            {rawData ? <AppPanel title=\"6. Export\"><DownloadVcfFile /></AppPanel> : null}\n        </div>\n    )\n}\n\nexport default styled(React.memo(App))`\n    height: 100%;\n    overflow: auto;\n    max-width: 1000px;\n    margin: auto;\n`\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Papa from 'papaparse'\nimport { RawDatum, RawData } from '../types'\n\nexport class ParseError extends Error {}\n\n// TODO : i18n\nconst normalizePapaParseError = (error: Papa.ParseError, data: RawData): ParseError => {\n    let message = ''\n    if (data[error.row]) {\n        message = `line ${error.row} (${error.message}) : ${Object.values(data[error.row]).join(', ')}`\n    } else {\n        message = `line ${error.row} ${error.message}`\n    }\n    return new ParseError(message)\n}\n\nexport interface ParseResult {\n    data: RawData\n    errors: Array<ParseError>\n}\n\nexport const parseCsv = async (file: File): Promise<ParseResult> => {\n    return new Promise((resolve) => {\n        Papa.parse<RawDatum>(file, {\n            header: true,\n            skipEmptyLines: true,\n            complete: (results) => {\n                let data: RawData = results.data\n                let errors: ParseResult[\"errors\"] = []\n                if (results.errors.length) {\n                    // Remove errored rows\n                    const erroredRows = results.errors.map((error) => error.row)\n                    data = data.filter((d, i) => !erroredRows.includes(i))\n                    errors = results.errors.map((error) =>\n                        normalizePapaParseError(error, results.data)\n                    )\n                }\n                resolve({ data, errors })\n            },\n        })\n    })\n}\n","import { all, takeLatest, call, put, StrictEffect, select } from 'redux-saga/effects'\nimport { RawData } from '../types'\nimport { parseCsv, ParseResult } from '../utils/parsing'\nimport { getDefaultVcfFieldMapping } from '../utils/vcf'\nimport {\n    RAW_DATA_LOAD_LOCAL,\n    rawDataLoadComplete,\n    RawDataLoadLocal,\n} from './raw-data'\nimport { selectRawDataHeaders } from './selectors'\nimport { setVcfFieldMapping } from './vcf-field-mapping'\n\nfunction* getAllRawData() {\n    // const results: MultipleResultsWithErrors = yield loadSeveralCollectionsAndErrors(\n    //     configDb,\n    //     ['someModel']\n    // )\n    // const loadedData: { [key: string]: any } = {}\n    // const errors: Array<[string, Error]> = []\n    // Object.entries(results).forEach(\n    //     ([collectionId, [error, validatedData]]) => {\n    //         if (validatedData) {\n    //             loadedData[collectionId] = validatedData\n    //         }\n    //         if (error) {\n    //             errors.push([collectionId, error])\n    //         }\n    //     }\n    // )\n    // if (errors.length === 0) {\n    //     yield put(\n    //         rawDataLoadSuccess({\n    //             someModel: loadedData.someModel,\n    //         })\n    //     )\n    // } else {\n    //     yield put(rawDataLoadError(errors))\n    // }\n}\n\nfunction* rawDataLoadLocalSaga(\n    action: RawDataLoadLocal\n): Generator<StrictEffect, void, never> {\n    const result: ParseResult = yield call(parseCsv, action.payload)\n    yield put(rawDataLoadComplete(result))\n    const headers = yield select(selectRawDataHeaders)\n    yield put(setVcfFieldMapping(getDefaultVcfFieldMapping(headers)))\n}\n\nfunction* rawDataLoadSaga(): Generator<StrictEffect, void, never> {\n    yield takeLatest(RAW_DATA_LOAD_LOCAL, rawDataLoadLocalSaga)\n}\n\nexport default function* rootSaga() {\n    yield all([rawDataLoadSaga()])\n}\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux'\nimport rootSaga from './sagas'\nimport createSagaMiddleware from 'redux-saga'\nimport { rawDataReducer } from './raw-data'\nimport { vcfFieldMappingReducer } from './vcf-field-mapping'\nimport { outoutOptionsReducer } from './output-options'\n\nconst rootReducer = combineReducers({\n    rawData: rawDataReducer,\n    vcfFieldMapping: vcfFieldMappingReducer,\n    outputOptions: outoutOptionsReducer,\n})\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nconst enhancers = [applyMiddleware(sagaMiddleware)]\nif (\n    process.env.NODE_ENV === 'development' &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__\n) {\n    enhancers.push(\n        (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n    )\n}\n\nconst preloadedState = {}\n\nexport const store = createStore(\n    rootReducer,\n    preloadedState,\n    compose(...enhancers)\n)\n\nsagaMiddleware.run(rootSaga)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { createGlobalStyle } from 'styled-components'\nimport theme from './theme'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n    a {\n        text-decoration: none;\n    }\n\n    body {\n        overflow: hidden;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 16px;\n    }\n\n    html,\n    body,\n    #root {\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n    }\n\n    body {\n        color: ${theme.colors.main};\n        background-color: ${theme.colors.background};\n        font-size: ${theme.fontSizes.desktop}px;\n        @media (max-width: ${theme.dimensions.thresholdMobile}px) {\n            font-size: ${theme.fontSizes.mobile}px;\n        }\n        font-family: ${theme.fonts.default};\n    }\n\n    *::-webkit-scrollbar {\n        width: 0.5em;\n        height: 0.5em;\n    }\n       \n    *::-webkit-scrollbar-thumb {\n        background-color: ${theme.colors.scrollBg};\n        outline: 1px solid ${theme.colors.scrollBg};\n    }\n\n    * {\n        scrollbar-color: ${theme.colors.scroll} ${theme.colors.scrollBg};\n        scrollbar-width: thin;\n    }\n\n    button, input {\n        border:  1px ${theme.colors.main} solid;\n        border-radius: 0.3em;\n        font-family: ${theme.fonts.default};\n        color: ${theme.colors.main};\n        padding: 0.5em;\n    }\n\n    button {\n        background-color: ${theme.colors.backgroundButton};\n    }\n\n    input {\n        background-color: transparent;\n    }\n\n    h1, h2 {\n        \n    }\n\n    h2 {\n        color: ${theme.colors.title2};\n    }\n\n    /* TODO : Move from here */\n    .react-select__menu-list {\n        background-color: ${theme.colors.background2};\n        .react-select__option {\n            background-color: ${theme.colors.background2};\n            cursor: pointer;\n            &.react-select__option--is-focused {\n                background-color: ${theme.colors.highlight};\n            }\n        }\n    }\n`\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}